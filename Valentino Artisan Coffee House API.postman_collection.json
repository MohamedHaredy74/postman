{
	"info": {
		"_postman_id": "3192e5e1-0f2f-494a-8cb2-b13d268dc81f",
		"name": "Valentino Artisan Coffee House API",
		"description": "An API for managing orders and products at a coffee place named Valentino's Artisan Coffee House.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24377430"
	},
	"item": [
		{
			"name": "status",
			"item": [
				{
					"name": "Get API status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validate status \", function (){\r",
									"    pm.expect(pm.response.code).to.eql(200)\r",
									"    pm.expect(pm.response.status).to.eql('OK');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						},
						"description": "Retrieve the current status of the API"
					},
					"response": [
						{
							"name": "API status",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"status"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"<string>\"\n}"
						}
					]
				}
			],
			"description": "Get the status of the API."
		},
		{
			"name": "products",
			"item": [
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"validate status code 200\", function (){\r",
									"    pm.expect(pm.response.code).to.eql(200)\r",
									"});\r",
									"body=pm.response.json();\r",
									"pm.test(\"products list is not empty\",function(){\r",
									"    pm.expect(body.products).to.not.empty;\r",
									"})\r",
									"\r",
									"pm.test(\"verify response header\",function(){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Cowboy');\r",
									"    pm.expect(pm.response.headers.get('Etag')).to.eql('W/\"32d-iJ1rRThY6dy5zQ0JnbHN4Y47uRM\"');\r",
									"});\r",
									"\r",
									"const schema={\r",
									"    'type':'object',\r",
									"    'required':['totalResults','currentPage','totalPages','products'],\r",
									"    'properties':{\r",
									"        'totalResults':{'type':'number','minimum':5},\r",
									"        'currentPage':{'type':'number',\r",
									"                        'minimum':1 },\r",
									"        'products':{\r",
									"            'type':'array',\r",
									"            'required':['id','category','name','isAvailable'],\r",
									"            'properties':{\r",
									"                'id':{'type':'number'},\r",
									"                'isAvailable':true\r",
									"            }\r",
									"\r",
									"        }                \r",
									"\r",
									"\r",
									"    }\r",
									"    \r",
									"};\r",
									"pm.test(\"verify json  schema \",function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products?category=cookie",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "The page number to fetch",
									"disabled": true
								},
								{
									"key": "category",
									"value": "cookie"
								},
								{
									"key": "limit",
									"value": "3",
									"disabled": true
								}
							]
						},
						"description": "Retrieve a paginated list of products, 10 products per page"
					},
					"response": [
						{
							"name": "A list of products",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products?page=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to fetch"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Get single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const body =pm.response.json();\r",
									"\r",
									"pm.test(\"validate status code 200\", function (){\r",
									"    pm.expect(pm.response.code).to.eql(200)\r",
									"});\r",
									"\r",
									"pm.test(\"verify response body properties\", function(){\r",
									"    pm.expect(body.id).to.eql(parseInt(pm.collectionVariables.get('productId')));\r",
									"});\r",
									"\r",
									"pm.test(\"verify response header\",function(){\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Cowboy');\r",
									"    pm.expect(pm.response.headers.get('Etag')).to.eql('W/\"cc-qbH8jTGkh3FvdlTUiDrRb+PKW60\"');\r",
									"});\r",
									"\r",
									"\r",
									"const schema={\r",
									"    'type':'object',\r",
									"    required:['id','category','name','isAvailable','product-description','additionalText'],\r",
									"    properties:{\r",
									"        'id':{'type':'number'},\r",
									"        'category':{'type':'string'},\r",
									"        'isAvailable':{'type':'boolean'}\r",
									"    },\r",
									"    'additionalProperties':true\r",
									"};\r",
									"\r",
									"pm.test(\"validate jsonSchema \",function(){\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/:productId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":productId"
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productId}}"
								}
							]
						},
						"description": "Retrieve a single product by specifying the product ID."
					},
					"response": [
						{
							"name": "A list of products",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products?page=1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "The page number to fetch"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"category\": \"<string>\",\n    \"name\": \"<string>\",\n    \"isAvailable\": \"<boolean>\"\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "clients",
			"item": [
				{
					"name": "Register a new client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"set api-key\",function(){\r",
									"    body =pm.response.json();\r",
									"    pm.collectionVariables.set(\"apiKey\",body.token);\r",
									"});\r",
									"\r",
									"pm.test(\"validate status code 200\", function (){\r",
									"    pm.expect(pm.response.code).to.eql(200)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomExampleEmail}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						},
						"description": "Register a new API client by providing an email address"
					},
					"response": [
						{
							"name": "Client registered",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"value\": \"reference #/components/schemas/ApiClient not found in the OpenAPI spec\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "orders",
			"item": [
				{
					"name": "Create a new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response=pm.response.json();\r",
									"pm.collectionVariables.set(\"orderId\", response.id);\r",
									"\r",
									"pm.test(\"validate status code 200\", function (){\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"    pm.expect(pm.response.status).to.eql(\"Created\");\r",
									"});\r",
									"pm.test(\"verify order properties \",function(){\r",
									"    pm.expect(response.customerName).to.eql(pm.collectionVariables.get(\"customerName\"));\r",
									"    pm.expect(response.id).to.match(/^[A-Z0-9]{9}$/);\r",
									"    pm.expect(response.clientId).to.match(/^[A-z0-9]{9}$/);\r",
									"});\r",
									"\r",
									"pm.test(\"verify products list \",function(){\r",
									"    pm.expect(response.products).to.be.not.empty;\r",
									"    pm.expect(response.products[0]).to.have.property(\"id\");\r",
									"    pm.expect(response.products[1]).to.have.property(\"quantity\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.collectionVariables.set(\"customerName\",pm.variables.replaceIn('{{$randomFullName}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"{{customerName}}\",\n  \"products\": [\n    {\n      \"id\": 2001,\n      \"quantity\": 1\n    },\n    {\n      \"id\": 2002,\n      \"quantity\": 3\n    }\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						},
						"description": "Place a new order by providing customer details and ordered products"
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"body=pm.response.json();\r",
									"pm.test(\"validate status code 200\", function (){\r",
									"    pm.expect(pm.response.code).to.eql(200)\r",
									"});\r",
									"pm.test('assert body properties',function(){\r",
									"    pm.expect(body).to.not.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"body=pm.response.json();\r",
									"pm.test(\"validate status code 200\", function (){\r",
									"    pm.expect(pm.response.code).to.eql(200)\r",
									"});\r",
									"\r",
									"pm.test(\"verify reponse body properties\",function(){\r",
									"    pm.expect(body.products).not.empty;\r",
									"});\r",
									"\r",
									"const schema={\r",
									"\r",
									"    'type':'object',\r",
									"    'required':['id','clientId','created','customerName','products'],\r",
									"    'properties':{\r",
									"        'id':{'type':'string','pattern':'^[A-Z]{9}$'},\r",
									"        'created':{'type':'string','formate':'date-time'},\r",
									"        'clientId':{'type':'string','pattern':'^[A-z1-9]{9}$'},\r",
									"        'products':{'type':'array',\r",
									"                    'items':{'type':'object'}}\r",
									"    },\r",
									"    \"additionalProperties\": true\r",
									"\r",
									"};\r",
									"pm.test(\"schema is valid \",function(){\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Get an order by ID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "1001"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "175"
								},
								{
									"key": "Etag",
									"value": "W/\"af-+MecHi3Lq63KtKg+V51u6NI2LSU\""
								},
								{
									"key": "Date",
									"value": "Wed, 18 Oct 2023 16:12:40 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"DSEKOOGUA\",\n    \"clientId\": \"Uss1RL4fd\",\n    \"created\": \"2023-10-18T16:10:27.369Z\",\n    \"customerName\": \"Kristy Heathcote\",\n    \"customerEmail\":\"haredy@gmail.com\",\n    \"products\": [\n        {\n            \"id\": 2001,\n            \"quantity\": 1\n        },\n        {\n            \"id\": 2002,\n            \"quantity\": 3\n        }\n    ]\n}"
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{apiKey}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "x-api-key",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://valentinos-coffee.glitch.me",
			"disabled": true
		},
		{
			"key": "baseUrl",
			"value": "https://valentinos-coffee.herokuapp.com",
			"type": "string"
		},
		{
			"key": "apiKey",
			"value": "e71454f8dab88f492ae9ba72ade50ab239a87c46",
			"type": "string"
		},
		{
			"key": "orderId",
			"value": "I62FDZQ42"
		},
		{
			"key": "productId",
			"value": "1003"
		},
		{
			"key": "customerName",
			"value": "Darrel Price"
		}
	]
}